/*
    Copyright 2010 Jamie Love

    This file is part of the "R-Node Server".

    R-Node Server is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2.1 of the License, or
    (at your option) any later version.

    R-Node Server is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with R-Node Server.  If not, see <http://www.gnu.org/licenses/>.
*/

var SYS     = require("sys");
var QUERY   = require ("querystring");
var URL     = require("url");
var UTILS   = require("../rnodeUtils");
var FS      = require("fs");
var SHA256  = require("../sha256");

/**
 * Generalised file streamer, to stream files to the client without
 * them having a specific path to the file.
 * 
 * For files generated by R and the like.
 */

var pageFilePrefix = '';
var pageFiles = {
};

exports.name = "/pager";

/**
 * Adds a file to the pager. The element passed in is an object 
 * of the following form:
 * {
 * 	path: path to file, as known by R-Node.
 *  mimeType: the mime type of the file (defaults to 'text/plain')
 *  toDelete: true to delete automatically after delivery to the client.
 * }
 * 
 * returns the key to use to get the file - URL will be /pager/*key*
 */

function addFile (file) {
    var key = SHA256.hex_sha256 (file.path + (new Date().getTime()));
    pageFiles[key] = { 
          file: file.path
        , mimeType: file.mimeType || 'text/plain'
        , deleteFile: file.toDelete
    };
	return key;
}


exports.init = function (rNodeApi) {
    rNodeApi.extend('addPagerFile', addFile)
    rNodeApi.addRestrictedUrl (/\/pager\//);
}

exports.handle = function (req, resp, sid, rNodeApi) {
	
    var url = URL.parse (req.url, true);
    var parts = url.href.split(/\?/)[0].split(/\//);
    var file = parts.length == 3 ? parts[2] : null;
    if (!file || !pageFiles[file]) {
        rNodeApi.log(req, 'Error finding file ' + file + ' for page request.');
        resp.writeHeader(404, { "Content-Type": "text/plain" });
        resp.end();
        return true;
    }

    var keep = (url.query && url.query.keep == 1) || false;
    var asAttachment = (url.query && url.query.attachment == 1) || false;

    if (keep) 
        SYS.debug('Keeping file for redownload.');
    if (asAttachment)
        SYS.debug('Downloading file as attachment');


    var d = pageFiles[file];
    SYS.debug('Streaming file "' + file + '" which is "' + d.file + '"');

    var headers =  { 
        contentType: d.mimeType 
    };

    if (asAttachment)
        headers["content-disposition"] = 'attachment; filename=' + d.file;

    UTILS.streamFile (d.file, resp, headers, function (err) {
        if (err)
            rNodeApi.log (req, 'Error streaming paged file to client: ' + err);
        if (!keep && d.deleteFile)
            FS.unlinkSync(pageFilePrefix + d.file);
        if (!keep)
            pageFiles[file] = null;
    });
	
	return true;
}

exports.canHandle = function (req, rNodeApi) {
    return req.url.beginsWith('/pager/');
}
 
